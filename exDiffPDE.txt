import numpy as np
import scipy as sp
from scipy.linalg import solve_banded
import math
import matplotlib.pyplot as plt
#solution for a simple case using boundaries at the +/- inf in the position domain as well as the condition that
def crnkN(b):
   x1 = np.arange(0,1000)
   for i in range(1000):
      if i == 0:
         x1[i] = 0
      elif i == 999:
         x1[i] = 0
      else:
         x1[i] = - 1
   x2 = np.arange(0,1000)
   for i in range(1000):
       x2[i] = 3
   x3 = x1
   ab = np.array([x1,x2,x3])
   return solve_banded((1,1), ab, b)
F = np.meshgrid(np.linspace(0,1000,num = 1000,dtype = float),np.linspace(0,1000,num = 1000,dtype = float))[0]
for i in range(1000):
   F[0][i] = 1 - math.exp(-(float(i)-499)**2)
b = np.linspace(0,1000, num = 1000, dtype = float)
for j in range(999):
   for i in range(1000):
      if i == 0:
         b[i] = F[j][i+1] - F[j][i] + 2
      elif i == 999:
         b[i] = F[j][i-1] - F[j][i] + 2
      else:
         b[i] = F[j][i+1] - F[j][i] + F[j][i-1]
   F[j+1] =  crnkN(b)